import os
import torch
from natsort import natsorted

from ..base_evaluator import BaseEvaluator
from .inception_score import calculate_inception_score

class DiversityEvaluator(BaseEvaluator):
    """
    Evaluates the diversity of generated images for a given method using Inception Score.
    """
    def __init__(self, config: dict, timestamp: str, mode: str, language: str):
        """
        Initializes the DiversityEvaluator.

        Args:
            config (dict): The configuration dictionary.
        """
        super().__init__(config, timestamp, mode, language)
        self.device = torch.device(self.get_device())

        self.is_batch_size = 32
        self.is_splits = 10

    def _get_all_image_paths_for_method(self, method):
        """
        Gets all image paths for a specific method by traversing its output directory.

        Args:
            method (str): The name of the model/method.

        Returns:
            list: A sorted list of full image paths for the method.
        """
        method_path = os.path.join(self.output_path, method)
        image_paths = []
        if not os.path.isdir(method_path):
            print(f"Warning: Method directory not found at '{method_path}'")
            return image_paths

        for root, _, files in os.walk(method_path):
            for img_file in natsorted(files):
                if img_file.lower().endswith(('.png', '.jpg', '.jpeg')):
                    image_paths.append(os.path.join(root, img_file))
        return image_paths

    def evaluate(self, method: str, **kwargs):
        """
        Calculates the Inception Score for all images generated by a given method.

        Args:
            method (str): The name of the method to evaluate.

        Returns:
            dict: A dictionary containing the inception score and its standard deviation.
                  Returns {'inception_score': 0.0, 'inception_score_std': 0.0} if no images are found.
        """
        print(f"Starting Diversity evaluation for method: {method}")
        
        image_paths = self._get_all_image_paths_for_method(method)

        if not image_paths:
            print(f"Warning: No images found for method '{method}'. Skipping diversity evaluation.")
            return {'inception_score': 0.0, 'inception_score_std': 0.0}

        print(f"Found {len(image_paths)} images for method '{method}'. Calculating Inception Score...")
        
        is_mean, is_std = calculate_inception_score(
            image_paths,
            batch_size=self.is_batch_size,
            splits=self.is_splits,
            device=self.device
        )

        print(f"Diversity evaluation complete for method: {method}. Inception Score: {is_mean:.4f} +/- {is_std:.4f}")

        return {
            'inception_score': is_mean,
            'inception_score_std': is_std
        }